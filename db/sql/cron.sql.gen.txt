-- Code generated by gomarvin, v0.10.x

CREATE TABLE IF NOT EXISTS crons (
  -- init
  cron_id     uuid              DEFAULT uuid_generate_v4() PRIMARY KEY,
  created_at    TIMESTAMP         NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMP         NOT NULL DEFAULT NOW(),

  -- new columns below
  change_me     VARCHAR(300)      NOT NULL
);


-- when the row is updated, update the "updated_at" timestamp
CREATE TRIGGER set_timestamp BEFORE UPDATE ON crons
FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();


-- name: Cron_CountAll :one
SELECT      COUNT(*)
FROM        crons;


-- name: Cron_GetAll :many
SELECT      cron_id, created_at, change_me
FROM        crons
ORDER BY    created_at DESC;


-- name: Cron_GetAllWithPaginationFirstPage :many
SELECT      cron_id, created_at, change_me
FROM        crons
ORDER BY    created_at DESC
LIMIT       $1;


-- name: Cron_GetAllWithPaginationNextPage :many
SELECT      cron_id, created_at, change_me
FROM        crons
WHERE ( created_at <= @created_at::TIMESTAMP  OR 
      ( created_at = @created_at::TIMESTAMP   AND cron_id < @cron_id::uuid ))
ORDER BY    created_at DESC
LIMIT       @_limit::int;


-- name: Cron_GetAllWhereCreatedAt :many
SELECT      cron_id, created_at, change_me
FROM        crons
WHERE       created_at = $1
ORDER BY    created_at DESC;


-- name: Cron_GetAllBetweenDates :many
SELECT      cron_id, created_at, change_me
FROM        crons
WHERE       created_at BETWEEN SYMMETRIC $1 AND $2
ORDER BY    created_at DESC;


-- name: Cron_GetWhereChange_MeIncludes :many
SELECT      cron_id, created_at, change_me
FROM        crons
WHERE       change_me ILIKE '%' || ( $1 ) || '%'
ORDER BY    created_at DESC;


-- name: Cron_GetWhereIdEquals :one
SELECT      cron_id, created_at, change_me
FROM        crons
WHERE       cron_id = $1
LIMIT 1;


-- name: Cron_Create :one
INSERT INTO crons ( change_me )
VALUES      ( $1 )
RETURNING   *;


-- name: Cron_UpdateChange_MeWhereIdEquals :one
UPDATE      crons
SET         change_me = $1
WHERE       cron_id = $2
RETURNING   *;


-- name: Cron_DeleteWhereIdEquals :one
DELETE FROM crons
WHERE       cron_id = $1
RETURNING   *;
