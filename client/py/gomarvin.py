"""
API client generated by gomarvin, DO NOT EDIT!

Rename the current file if you want to 
edit it and save changes.

Repo             : https://github.com/tompston/gomarvin
Docs             : https://gomarvin.pages.dev/docs
Editor           : https://gomarvin.pages.dev
project_name     : "xtuples",
config_version   : "0.1"
gomarvin_version : "v0.10.x"

"""

from dataclasses import dataclass
from typing import Dict, Optional
import requests


@dataclass
class Client:
    """
    The API client used by the fetch function.
    """
    host_url: str
    api_prefix: str
    headers: Dict[str, str]


@dataclass
class ApiResponse:
    """
    Interface for the expected response.
    """
    data: any
    message: str
    status: int
    links: Optional[Dict[str, str]] = None


defaultClient = Client(
    host_url="http://localhost:3000",
    api_prefix="/api/v1",
    headers={
        "Content-type": "application/json;charset=UTF-8",
    }
)
@dataclass
class CreateCronBody:
    """
    ### Body for the CreateCron endpoint

    @field taskname `required`
    @field at `required`
    """
    taskname: str  
    at: str  
                
@dataclass
class UpdateCronBody:
    """
    ### Body for the UpdateCron endpoint

    @field taskname `required`
    @field at `required`
    """
    taskname: str  
    at: str  
                
@dataclass
class ExecBody:
    """
    ### Body for the Exec endpoint

    @field taskname `required`
    """
    taskname: str  
                

class CronEndpoints:
    """
    Fetch functions for the Cron endpoints module
    """

    def __init__(self, client: Client):
        self.client = client

    def GetCrons(self, options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None) -> requests.Response:
        """
        ### GET URL/cron
        
        Fetch GetCrons endpoint and return the response
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}/cron{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("GET",url, headers=self.client.headers)

    def GetCron(self,id: int,  options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None) -> requests.Response:
        """
        ### GET URL/cron/[id:int]
        
        Fetch GetCron endpoint and return the response
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
         * @param {number} id url param for the endpoint 
        
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}/cron/{id}{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("GET",url, headers=self.client.headers)

    def CreateCron(self,body: CreateCronBody, options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None ) -> requests.Response:
        """
        ### POST URL/cron
        
        Fetch CreateCron endpoint and return the response
         * @param `body` CreateCronBody - see CreateCronBody class for possible validation fields
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}/cron{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("POST",url, headers=self.client.headers, json=body.__dict__)

    def DeleteCron(self,id: int,  options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None) -> requests.Response:
        """
        ### DELETE URL/cron/[id:int]
        
        Fetch DeleteCron endpoint and return the response
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
         * @param {number} id url param for the endpoint 
        
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}/cron/{id}{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("DELETE",url, headers=self.client.headers)

    def UpdateCron(self,id: int, body: UpdateCronBody, options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None ) -> requests.Response:
        """
        ### PUT URL/cron/[id:int]
        
        Fetch UpdateCron endpoint and return the response
         * @param `body` UpdateCronBody - see UpdateCronBody class for possible validation fields
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
         * @param {number} id url param for the endpoint 
        
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}/cron/{id}{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("PUT",url, headers=self.client.headers, json=body.__dict__)
    

class ExecEndpoints:
    """
    Fetch functions for the Exec endpoints module
    """

    def __init__(self, client: Client):
        self.client = client

    def Exec(self,body: ExecBody, options: Optional[Dict[str, any]] = None ,append_url: Optional[str] = None ) -> requests.Response:
        """
        ### POST URL/exec
        
        Fetch Exec endpoint and return the response
         * @param `body` ExecBody - see ExecBody class for possible validation fields
         * @param `options` Dict[str, any] - optional request options (useful when need to override the default headers)
         * @param `append_url` str - optional url to append to the endpoint url
        """
        appended_url = append_url if append_url else ""
        url = f"{self.client.host_url}{self.client.api_prefix}/exec{appended_url}"
        if options:
            return requests.request(**options, url=url)
        return requests.request("POST",url, headers=self.client.headers, json=body.__dict__)
    
